@startuml
title Example for Inheritance
'This file is generated by the GenerateExamplesForDoc test.

    '.Room
    interface "Room" as Room {
        + connect(Room) : Unit
    }


    '.MagicRoom
    class "MagicRoom" as MagicRoom {
        + connect(Room) : Unit
    }


    '.OrdinaryRoom
    class "OrdinaryRoom" as OrdinaryRoom {
        + connect(Room) : Unit
    }


    '.MazeGame
    class "MazeGame" as MazeGame {
        + rooms : MutableList<Room>
		# makeRoom() : Room
    }


    '.MagicMazeGame
    class "MagicMazeGame" as MagicMazeGame {
        + rooms : MutableList<Room>
		# makeRoom() : MagicRoom
    }


    '.OrdinaryMazeGame
    class "OrdinaryMazeGame" as OrdinaryMazeGame {
        + rooms : MutableList<Room>
		# makeRoom() : OrdinaryRoom
    }


Room <|-- MagicRoom
Room <|-- OrdinaryRoom
MazeGame <|-- MagicMazeGame
MazeGame <|-- OrdinaryMazeGame
 
note as note_of_code
Kotlin Code:

    // Example inspired from https://en.wikipedia.org/wiki/Factory_method_pattern
    interface Room {
        fun connect(room: Room?)
    }
    
    class MagicRoom : Room {
        override fun connect(room: Room?) {}
    }
    
    class OrdinaryRoom : Room {
        override fun connect(room: Room?) {}
    }
    
    abstract class MazeGame {
        val rooms: MutableList<Room> = ArrayList()
    
        init {
            val room1 = makeRoom()
            val room2 = makeRoom()
            room1.connect(room2)
            rooms.add(room1)
            rooms.add(room2)
        }
    
        protected abstract fun makeRoom(): Room
    }
    class MagicMazeGame : MazeGame() {
        override fun makeRoom(): MagicRoom {
            return MagicRoom()
        }
    }
    
    class OrdinaryMazeGame : MazeGame() {
        override fun makeRoom(): OrdinaryRoom {
            return OrdinaryRoom()
        }
    }  
    
end note
            
@enduml
